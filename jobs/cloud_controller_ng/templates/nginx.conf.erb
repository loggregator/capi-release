# deployment cloudcontroller nginx.conf
<% if p("bpm.enabled") %>
daemon off;

pid       /var/vcap/data/cloud_controller_ng/nginx.pid;
error_log /var/vcap/sys/log/cloud_controller_ng/nginx-error.log <%= p("cc.nginx_error_log_level") %>;
<% else %>
pid       /var/vcap/sys/run/nginx_cc/nginx.pid;
error_log <%= p("cc.nginx_error_log_destination") %> <%= p("cc.nginx_error_log_level") %>;
<% end %>
error_log syslog:server=127.0.0.1,severity=error,tag=vcap_nginx_error <%= p("cc.nginx_error_log_level") %>;

worker_processes auto;

events {
  worker_connections  8192;
  use epoll;
}

http {
  include       mime.types;
  default_type  text/html;
  server_tokens off;

  log_format main  '<%= p("cc.nginx_access_log_format").chomp %>';

  <% if p("bpm.enabled") %>
  access_log  /var/vcap/sys/log/cloud_controller_ng/nginx-access.log main;
  <% else %>
  access_log  <%= p("cc.nginx_access_log_destination") %>  main;
  <% end %>
  access_log  syslog:server=127.0.0.1,severity=info,tag=vcap_nginx_access main;

  sendfile             on;  #enable use of sendfile()
  sendfile_max_chunk   1M;  #make sure not to block on fast clients reading large files
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout    <%= p("cc.server_keepalive_timeout") %> 20;

  <% if_p("cc.nginx_rate_limit_general") do %>
  limit_req_zone $http_authorization zone=all:10m rate=<%=p("cc.nginx_rate_limit_general")['limit'] %>;
  <% end %>

  <% if_p("cc.nginx_rate_limit_zones") do %>
    <% p("cc.nginx_rate_limit_zones").each do |zone| %>
  limit_req_zone $http_authorization zone=<%= zone['name'] %>:10m rate=<%= zone['limit'] %>;
    <% end %>
  <% end %>
  limit_req_status 429;

  client_max_body_size <%= p("cc.client_max_body_size") %>; #already enforced upstream/but doesn't hurt.

  client_body_temp_path /var/vcap/data/cloud_controller_ng/tmp/client_body_temp;
  proxy_temp_path       /var/vcap/data/cloud_controller_ng/tmp/proxy_temp;
  proxy_cache_path      /var/vcap/data/cloud_controller_ng/tmp/cache levels=1:2 keys_zone=syslog_bindings_cache:1m max_size=1g use_temp_path=off;
  fastcgi_temp_path     /var/vcap/data/cloud_controller_ng/tmp/fastcgi_temp;
  uwsgi_temp_path       /var/vcap/data/cloud_controller_ng/tmp/uwsgi_temp;
  scgi_temp_path        /var/vcap/data/cloud_controller_ng/tmp/scgi_temp;

  upstream cloud_controller {
    <% if p("bpm.enabled") %>
    server unix:/var/vcap/data/cloud_controller_ng/cloud_controller.sock;
    <% else %>
    server unix:/var/vcap/sys/run/cloud_controller_ng/cloud_controller.sock;
    <% end %>
  }

  # This block ensures the endpoints it serves are handled by mutual TLS.
  # Refer to the 'return 403' statement in the http block to see how we secure those endpoints.
  server {
    listen <%= p("cc.tls_port") %> ssl;

    ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_certificate        /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls.crt;
    ssl_certificate_key    /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls.key;
    ssl_client_certificate /var/vcap/jobs/cloud_controller_ng/config/certs/mutual_tls_ca.crt;
    ssl_verify_client      on;
    ssl_verify_depth       2;
    ssl_protocols          TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    server_name  _;
    server_name_in_redirect off;
    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>
    proxy_buffering             off;
    proxy_set_header            Host $host;
    proxy_set_header            X-Real_IP $remote_addr;
    proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect              off;
    proxy_connect_timeout       10;


    location /internal/v4/ {
      proxy_pass http://cloud_controller;
    }

    location ~ /internal/v3/staging/.*/(droplet_completed|build_completed) {
      proxy_pass http://cloud_controller;
    }

    location ~ /internal/v4/(droplets|buildpack_cache)/.*/upload {
      # Allow download the droplets and buildpacks
      if ($request_method = GET){
        proxy_pass http://cloud_controller;
      }

      # Allow large uploads
      client_max_body_size <%= p("cc.app_bits_max_body_size") %>; #already enforced upstream/but doesn't hurt.

      # Pass altered request body to this location
      upload_pass   @cc_uploads;

      # Store files to this directory
      upload_store /var/vcap/data/cloud_controller_ng/tmp/staged_droplet_uploads;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "droplet_path" $upload_tmp_path;

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
      }

    location ~ /internal/v4/syslog_drain_urls {
        proxy_pass http://cloud_controller;
        proxy_cache syslog_bindings_cache;
    }

    include local_blobstore_downloads.conf;

    # Pass altered request body to a backend
    location @cc_uploads {
      proxy_pass http://cloud_controller;
    }
  }

  # This block handles public endpoints over TLS
  <% if_p("cc.public_tls.ca_cert") do %>
  server {
  listen <%= p("cc.public_tls.port") %> ssl;

  ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
  ssl_certificate        /var/vcap/jobs/cloud_controller_ng/config/certs/public_tls.crt;
  ssl_certificate_key    /var/vcap/jobs/cloud_controller_ng/config/certs/public_tls.key;

  ssl_protocols          TLSv1.2;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  server_name  _;
  server_name_in_redirect off;
  <% if p("request_timeout_in_seconds").to_i > 0 %>
    proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
    proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
  <% end %>

  include local_blobstore_downloads.conf;
  include nginx_external_endpoints.conf;
  }
  <% end %>

  # This block handles public endpoints over non-TLS secured HTTP
  # This is required for backwards compatibility during a rolling-deploy
  server {
  <% if p("cc.nginx.ip").empty? %>
    listen    <%= p("cc.external_port") %>;
  <% else %>
    listen    <%= p("cc.nginx.ip") %>:<%= p("cc.external_port") %>;
  <% end %>

    server_name  _;
    server_name_in_redirect off;
    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    include local_blobstore_downloads.conf;
    include nginx_external_endpoints.conf;
  }
}
